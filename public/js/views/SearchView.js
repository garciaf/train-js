// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var Backbone, Dispatcher, SearchView, StationCollection, UserModel;
  Backbone = require('backbone');
  StationCollection = require('collections/StationCollection');
  Dispatcher = require('event');
  require('bootstrap');
  UserModel = require('models/UserModel');
  (function() {});
  return SearchView = (function(_super) {

    __extends(SearchView, _super);

    function SearchView() {
      return SearchView.__super__.constructor.apply(this, arguments);
    }

    SearchView.prototype.el = 'body';

    SearchView.prototype.events = {
      "change #search": "searchStation",
      "blur #search": "searchStation"
    };

    SearchView.prototype.initialize = function() {
      this.search = $("#search");
      this.collection = new StationCollection();
      this.collection.on("reset", this.searchStation, this);
      this.collection.once("reset", this.initTypeahead, this);
      this.collection.once("reset", this.applyUserSettings, this);
      return this.collection.fetch();
    };

    SearchView.prototype.applyUserSettings = function() {
      this.user = new UserModel({
        id: 1
      });
      Dispatcher.on("search:complete", this.saveUserSearch, this);
      Dispatcher.on("station:selected", this.saveUserSearch, this);
      this.user.once("change", this.displayUserStation, this);
      return this.user.fetch();
    };

    SearchView.prototype.displayUserStation = function(user) {
      this.search.val(this.user.get('station'));
      return this.search.blur();
    };

    SearchView.prototype.saveUserSearch = function(model, collection) {
      var station;
      station = (collection != null ? collection.length : void 0) === 1 || (collection != null) === false ? model.get('name') : "";
      this.user.set({
        id: 1,
        station: station
      });
      return this.user.save();
    };

    SearchView.prototype.initTypeahead = function() {
      return this.search.typeahead({
        source: this.collection.getSearchValues()
      });
    };

    SearchView.prototype.searchStation = function() {
      var collection;
      collection = this.collection.findPerName(this.search.val());
      if (collection[0] != null) {
        this.firstResult = collection[0];
      }
      if (collection.length === 1) {
        Dispatcher.trigger("station:selected", this.firstResult);
      }
      return Dispatcher.trigger("search:complete", this.firstResult, this.collection.findPerName(this.search.val()));
    };

    return SearchView;

  })(Backbone.View);
});
